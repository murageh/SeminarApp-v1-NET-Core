//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NAVWS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", ConfigurationName="NAVWS.RenameSeminar_Port")]
    public interface RenameSeminar_Port
    {
        
        // CODEGEN: Generating message contract since the wrapper name (RenameSeminar_Result) of message RenameSeminar_Result does not match the default value (RenameSeminar)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar:RenameSeminar", ReplyAction="*")]
        NAVWS.RenameSeminar_Result RenameSeminar(NAVWS.RenameSeminar request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar:RenameSeminar", ReplyAction="*")]
        System.Threading.Tasks.Task<NAVWS.RenameSeminar_Result> RenameSeminarAsync(NAVWS.RenameSeminar request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RenameSeminar", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", IsWrapped=true)]
    public partial class RenameSeminar
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", Order=0)]
        public string no;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", Order=1)]
        public string seminarName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", Order=2)]
        public int seminarDuration;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", Order=3)]
        public decimal seminarPrice;
        
        public RenameSeminar()
        {
        }
        
        public RenameSeminar(string no, string seminarName, int seminarDuration, decimal seminarPrice)
        {
            this.no = no;
            this.seminarName = seminarName;
            this.seminarDuration = seminarDuration;
            this.seminarPrice = seminarPrice;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RenameSeminar_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/RenameSeminar", IsWrapped=true)]
    public partial class RenameSeminar_Result
    {
        
        public RenameSeminar_Result()
        {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface RenameSeminar_PortChannel : NAVWS.RenameSeminar_Port, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class RenameSeminar_PortClient : System.ServiceModel.ClientBase<NAVWS.RenameSeminar_Port>, NAVWS.RenameSeminar_Port
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RenameSeminar_PortClient() : 
                base(RenameSeminar_PortClient.GetDefaultBinding(), RenameSeminar_PortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.RenameSeminar_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RenameSeminar_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(RenameSeminar_PortClient.GetBindingForEndpoint(endpointConfiguration), RenameSeminar_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RenameSeminar_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RenameSeminar_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RenameSeminar_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RenameSeminar_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RenameSeminar_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NAVWS.RenameSeminar_Result NAVWS.RenameSeminar_Port.RenameSeminar(NAVWS.RenameSeminar request)
        {
            return base.Channel.RenameSeminar(request);
        }
        
        public void RenameSeminar(string no, string seminarName, int seminarDuration, decimal seminarPrice)
        {
            NAVWS.RenameSeminar inValue = new NAVWS.RenameSeminar();
            inValue.no = no;
            inValue.seminarName = seminarName;
            inValue.seminarDuration = seminarDuration;
            inValue.seminarPrice = seminarPrice;
            NAVWS.RenameSeminar_Result retVal = ((NAVWS.RenameSeminar_Port)(this)).RenameSeminar(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<NAVWS.RenameSeminar_Result> NAVWS.RenameSeminar_Port.RenameSeminarAsync(NAVWS.RenameSeminar request)
        {
            return base.Channel.RenameSeminarAsync(request);
        }
        
        public System.Threading.Tasks.Task<NAVWS.RenameSeminar_Result> RenameSeminarAsync(string no, string seminarName, int seminarDuration, decimal seminarPrice)
        {
            NAVWS.RenameSeminar inValue = new NAVWS.RenameSeminar();
            inValue.no = no;
            inValue.seminarName = seminarName;
            inValue.seminarDuration = seminarDuration;
            inValue.seminarPrice = seminarPrice;
            return ((NAVWS.RenameSeminar_Port)(this)).RenameSeminarAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RenameSeminar_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RenameSeminar_Port))
            {
                return new System.ServiceModel.EndpointAddress("http://murageh:7047/BC240/WS/CRONUS International Ltd./Codeunit/RenameSeminar");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RenameSeminar_PortClient.GetBindingForEndpoint(EndpointConfiguration.RenameSeminar_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RenameSeminar_PortClient.GetEndpointAddress(EndpointConfiguration.RenameSeminar_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            RenameSeminar_Port,
        }
    }
}
